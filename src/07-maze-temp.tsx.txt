import React from 'react';
import './App.css';
// maze boutaoshihou
const { useEffect } = React;

function App() {
  useEffect(() => {
    const canvasElem: any = document.getElementById("canvas");
    const context = canvasElem.getContext("2d");
    const rownum = 31;
    const colnum = 39;
    const WALL_SIZE = 10;
    canvasElem.height = rownum * WALL_SIZE;
    canvasElem.width = colnum * WALL_SIZE;

    const getData = () => {
      const data = [];

      for (let row = 0; row < rownum; row++) {
        data[row] = [0];
        for (let col = 0; col < colnum; col++) {
          data[row][col] = 1;
        }
      }

      for (let row = 1; row < rownum - 1; row++) {
        for (let col = 1; col < colnum - 1; col++) {
          data[row][col] = 0;
        }
      }

      for (let row = 2; row < rownum - 2; row += 2) {
        for (let col = 2; col < colnum - 2; col += 2) {
          data[row][col] = 1;
        }
      }

      for (let row = 2; row < rownum - 2; row += 2) {
        for (let col = 2; col < colnum - 2; col += 2) {
          let destRow = 2;
          let destCol = 2;

          do {
            const dir = row === 2 ?
              Math.floor(Math.random() * 4) :
              Math.floor(Math.random() * 3) + 1;

            switch (dir) {
              case 0: // up
                destRow = row - 1;
                destCol = col;
                break;
              case 1: // down
                destRow = row + 1;
                destCol = col;
                break;
              case 2: // left
                destRow = row;
                destCol = col - 1;
                break;
              case 3: // right
                destRow = row;
                destCol = col + 1;
                break;
            }
          } while (data[destRow][destCol] === 1);

          data[destRow][destCol] = 1;
        }
      }


      return data;
    }

    const data = getData();

    // draw
    for (let row = 0; row < data.length; row++) {
      for (let col = 0; col < data[row].length; col++) {
        if (data[row][col] === 1)
          context.fillRect(col * WALL_SIZE, row * WALL_SIZE, WALL_SIZE, WALL_SIZE);
      }
    }
  });

  return (
    <div className="App">
      <canvas
        id="canvas"
      // width={`${width}px`}
      // height={`${height}px`}
      />
    </div>
  );
}

export default App;
